Telemetry
~~~~~~~~~

Telemetry is used to obtain the current state of device.
To get telemetry, send command ``{"cmd": 4}``, the answer for thermostat will be:

.. code-block:: json 

     {
      "sn":"404CCAAAD4E8A89860609800000149",
      "t.0":"482","t.1":"399","t.2":"371","t.5":"368",
      "m.0":"2","m.1":"3","m.2":"1","m.5":"0","m.6":"255",
      "o.0":"-64","o.1":"1","o.5":"0","o.2":"0","o.4":"61",
      "t.7":"692","m.3":"0","f.3":"0","f.4":"0","f.5":"0",
      "f.6":"0","f.8":"0","f.7":"0","f.13":"0","f.0":"0",
      "f.17":"0","f.16":"0","f.9":"0","f.11":"0","f.12":"0",
      "f.20":"0","f.21":"0","f.22":"1","f.23":"0",
      "par.26":"45","par.27":"5","par.33":"35","par.34":"5",
      "time":"799767684","setPointStep":"0.5","setPointType":"3"
     }

``sn`` - device serial number

``x.n`` is the parameter key, where ``x`` is a group of parameters, ``n`` is the number in the group

Parameter groups:
	* ``t`` - temperature is 1/16 Â°C
		* ``0`` - internal overheating sensor
		* ``1`` - floor
		* ``2`` - air (for devices with an air sensor)
		* ``3`` - reserved
		* ``4`` - reserved
		* ``5`` - current setting
		* ``6`` - reserved
		* ``7`` - microcontroller temperature		
	* ``m`` - modes
		* ``0`` - control type: floor = 0, air = 1, air mode with floor limitation = 2 for devices with an air sensor
		* ``1`` - control type: schedule = 0, manual = 3, away = 4, temporary = 5
		* ``2`` - the number of the current period of the schedule (the first period of Monday = 0, Tuesday = maxSchedulePeriod ...)
		* ``3`` - blocking type: no blocking = 0, blocking changes from the cloud = 1, blocking changes from the local network = 2, both = 3
		* ``4`` - reserved
		* ``5`` - heating mode (0 - heating, 1 - cooling)
		* ``6`` - operating mode from which the timer was started: = scheduled = 0, manual = 3, away = 4, temporary = 5
	* ``o`` - other parameters
		* ``0`` - Wi-Fi signal strength in dBm
		* ``1`` - the reason for the last reboot. Depending on the hardware version of the platform, there can be two types of values: First - mask: power off = 0x04, soft reset = 0x08, watchdog timer = 0x10, low voltage = 0x40. Second: 9 - software reboot due to low MK supply voltage; 3 - software reboot; 1 - power reset.
		* ``2`` - timer remaining
		* ``4`` - humidity (for devices with an air sensor)
		* ``5`` - reason for reboot WCH: PINrst = 1, PORrst = 2, SOFTrst = 3, IndepWDGrst = 4, WinWDGrst = 5, BrounRst = 6
	* ``par`` - duplication of some device parameters
		* ``n`` - parameter number
	* ``te`` - extra temperatures
	* ``f`` - bit parameters
		* ``0`` - load status
		* ``1`` - reserved
		* ``2`` - floor restriction action (for devices with an air sensor)
		* ``3`` - no floor sensor
		* ``4`` - short circuit floor sensor
		* ``5`` - no air sensor (for devices with an air sensor)
		* ``6`` - reserved
		* ``7`` - preheat algorithm is active 
		* ``8`` - an open window function is active
		* ``9`` - internal overheating
		* ``10`` - battery is dead
		* ``11`` - problems with the clock
		* ``12`` - no overheat control
		* ``13`` - proportional mode is active
		* ``14`` - digital floor sensor is used
		* ``15`` - reserved
		* ``16`` - power off state
		* ``17`` - load operating time: 0 - no notification, 1 - notification present
		* ``18`` - reserved
		* ``19`` - reserved
		* ``20`` - zero crossing sensor error: 0 - no error 1 - error
		* ``21`` - Ignore time from cloud: 0 - does not ignore. 1 - ignores.
		* ``22`` - air sensor connection: 0 - not connected, 1 - connected (for devices with an air sensor)
		* ``23`` - air sensor battery status: 0- battery is OK, 1- battery is low (for devices with an air sensor)

